{
    "version": "https://jsonfeed.org/version/1",
    "title": "tim-munuhe",
    "home_page_url": "tim-munuhe.github.io/",
    "feed_url": "tim-munuhe.github.io/feed.json",
    "description": null,
    "icon": "tim-munuhe.github.io/apple-touch-icon.png",
    "favicon": "tim-munuhe.github.io/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Timothy W. Munuhe, Ph.D.",
        "url": "tim-munuhe.gitub.io",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "tim-munuhe.github.io/2021/05/01/mesh-fluidpm-plot",
            "title": "Basic Python with Darcy's Law - Meshing, Basic Spatial Solutions, and Plotting Output",
            "summary": "Form the mesh objects, calculate a basic solution over the mesh, and plot the output.",
            "content_text": "Now that we have some practice with objects in Python and Darcy’s law, we can create a program that is more expandable and useful. Since this is a physical problem, we need to consider space in our code. So, we need to add a mesh to represent the porous medium and the fluid inside its pores. We also need to output data as plots for immediate review and in a way that other programs can read.More classes and objects can get unwieldy, so let's develop a sketch of how the program is going to work overall so we can code effectively. First, a text description: the user (you, or me) is going to create a case file that the csv.Dictreader function will read into Python listing case parameters.  A case object will be instantiated using that data just read. This is as far as we got in the previous post. Now, we can create a mesh (object) representing the space filled with the fluid (object) and solid material/matrix (object). All three objects' parameters will be determined by that parameters specified in the case file. Since the fluid is the only one flowing, Darcy's Law will be called on it to calculate the pressure and flow velocity at the locations specified by the mesh. Lastly, relevant properties will be output to a file that the user can plot or analyze.Simple, right? Remember, one step at a time.The MeshThe mesh can represent a 1D, 2D, or 3D space. Assume we have a cylindrical pipe filled with sand and water. Depending on its width, diameter, and how homogeneous the sand is, we might want to consider it in 3D or 2D. If we also assume the pipe is very long relative to its diameter, we can simplify the problem to 1D. A 1D mesh is essentially a line with points along it while the 2D and 3D spaces can be divided into a variety of 2D and 3D shapes (squares and cubes being particularly common). So, each element of the 1D mesh represents a slice of the pipe.I'll be using finite difference method for the majority of the blog posts. There's more math here than I care to dig into but I recommend reading Patankar &amp; Spalding’s 1972 paper titled “A Calculation Procedure for Heat, Mass, and Momentum Transfer”. In short, from Darcy’s Law, the pressure gradient is used to calculate the velocity. So, the velocity and pressure are more accurately considered at offset locations, for example on a staggered mesh. That is, where you calculate the velocity is offset from where you calculate the pressures. So, you use the pressures at two adjacent cells to calculate the (volume-averaged) velocity at the face between those cells. You can do this to get the velocities at the interior faces. At the inlet and outlet, the inlet pressure and velocity are collocated which may affect the accuracy. That is not important for the current code but, for better-than-1st-order accuracy, we'd need to derive a better approximation for the pressure gradients there. In any case, CFD-Online has a pretty short article about the staggered grid issue.Back to the OOP: we create a mesh class where each mesh object has a name, shape, density, and specified node (x), interior face (xc), and boundary locations (also xc):class mesh(): # mesh class    def __init__(self,case): # Take in the case info for certain params        dim = 1 # case.dim        if (dim == 1):            self.Nx = int((case.xL - case.x0)/case.dx + 2.0)                    # Face locations            self.xc = np.ones(self.Nx)*case.x0# Initialize mesh            self.xc[self.Nx-1] = case.xL # Outward boundary            for i in range(2,self.Nx-1):                 self.xc[i] = (i-1)*case.dx # Cell Face Locations            # Node locations            self.x = np.copy(self.xc) # Initialize mesh            for i in range(0,self.Nx-1):                self.x[i] = (self.xc[i+1] + self.xc[i])/2 # Cell Node Locations: halfway between faces            self.x[self.Nx-1] = np.copy(self.xc[self.Nx-1]) # Outward boundary        def output(self,fname): # output mesh        with open(fname,'w', newline='') as csvfile:            mesh_write = csv.writer(csvfile,dialect = 'excel', delimiter = '\\t') # writer object            mesh_write.writerow(['i', 'x', 'xc']) # header row            for i in range(0,self.Nx):                mesh_write.writerow([i+1,self.x[i],self.xc[i]]) # actual data rowsThe mesh consists of nodes and faces: the number of nodes is the number of slices the make the pipe plus 2. Why the plus 2? There are two additional nodes at the inlet and outlet. There is one less face but, to keep the indices and array lengths the same, the inlet face is duplicated. This helps with coding and that first face can be ignored for the most part. The mesh requires a case object for its instantiation, so we create the mesh object using base_mesh = mesh(base). Let’s ask for some information, just to make sure everything ran smoothly:print('Node Locations w/ inlet:', base_mesh.x[0:5]) # check inlet location and spacingprint('Nx:', base_mesh.Nx) # check number of elementsprint('Outlet Location:', base_mesh.x[base_mesh.Nx-1])print('Face Locations:', base_mesh.xc[0:5]) &gt;&gt;&gt; Node Locations w/ inlet: [0.   0.01 0.03 0.05 0.07]&gt;&gt;&gt; Nx: 52&gt;&gt;&gt; Outlet Location: 1.0&gt;&gt;&gt; Face Locations: [0.   0.   0.02 0.04 0.06]The number of elements is correct, the inlet face is duplicated, and the spacing for the interior node locations is correct. For the calculations to follow, we just have to remember the offset between the node and face indices for our accuracy. Now we can output this to a file that another program can use, maybe for visualization, by calling the output method that's also in the mesh class: base_mesh.output('base_mesh.dat')If everything works, the first six lines of your text file will be:i\tx\txc1\t0.0\t0.02\t0.01\t0.03\t0.03\t0.024\t0.05\t0.045\t0.07\t0.06If you’re using excel, you can output a csv file: go to the Data tab and do text-to-columns on all the rows with a tab delimiter to get it formatted.Applying Darcy's Law as a Method to a Fluid ObjectBecause the porous medium and fluid occupy the space of the mesh, they need to have some of the same properties as the mesh, namely the shape and spatial positions of the mesh. Then, the pressure at p[i] is the pressure at the location x[i]. Apart from the size and shape, the fluid and porous medium share a pressure and have their own properties as outlined in Darcy's Law. Both have their own names and volume fractions. The fluid will have a viscosity and velocity and the porous medium will have a permeability:class fluid(): # fluid class, can create multiple fluid objects for multiphase flow or other studies    def __init__(self,mesh,fluid_prop):        self.name = fluid_prop['Name']        # Initialize variables        self.p = np.ones(mesh.Nx)*fluid_prop['p0'] # Pressure        self.p[mesh.Nx-1] = fluid_prop['pL'] # Pressure boundary at x = L        self.u = np.ones(mesh.Nx)*fluid_prop['u0'] # Velocity: Staggered mesh so velocity at faces        self.mu = np.ones(mesh.Nx)*fluid_prop['mu'] # Viscosity    def p_lin(self,mesh):        N = mesh.Nx        L = mesh.x[N-1]        L0 = mesh.x[0]        for i in range(1,N):            self.p[i] = (self.p[N-1]-self.p[0])/(L-L0)*mesh.x[i]    def darcyv(self,mesh,pm):        N = mesh.Nx        self.u[0] = -pm.K[0]/self.mu[0]*(self.p[1]-self.p[0])/(mesh.x[1]-mesh.x[0]) # inlet        self.u[1] = self.u[0] # same location        for i in range(2,N-1): # interior faces            Ai = pm.K[i-1]/self.mu[i-1]/(mesh.xc[i]-mesh.x[i-1])            Ai1 = pm.K[i]/self.mu[i]/(mesh.x[i]-mesh.xc[i])            self.u[i] = -Ai*Ai1/(Ai+Ai1)*(self.p[i]-self.p[i-1])        self.u[N-1] = -pm.K[N-1]/self.mu[N-1]*(self.p[N-1]-self.p[N-2])/(mesh.x[N-1]-mesh.x[N-2]) # outletclass por_med(): # porous medium class, for parametric studies or composite porous media    def __init__(self,mesh,pm_prop):        self.name = pm_prop        # Initialize Variables        self.K = np.ones(mesh.Nx)*pm_prop['K'] # Permeability        self.eps = np.ones(mesh.Nx)*pm_prop['eps'] # Porosity...fl1 = fluid(base_mesh,base.fl) # fluid object, determined by mesh and case's fluid propertiespm1 = por_med(base_mesh,base.pm) # porous medium object, determined by mesh and case's porous medium propertiesWith the fluid and porous medium objects created, we can find the pressures and flow velocities within the domain at the points specified by the mesh. While we can do something similar to the direct calculation in in the first blog post, let’s create methods so that the functions are tied to the specific objects. This connects the equations to the specific parts of the problem more directly.Since the porous medium is homogeneous, we can assume that the pressure distribution in the porous medium is linear, with the boundary conditions in the case corresponding to the inlet and outlet pressures. Then, we can code a very simple pressure calculation method for the fluid below the instantiation, represented by the p_lin(mesh) method in the fluid class above:print('Initial Pressure:',fl1.p[0:4])fl1.p_lin(base_mesh)print('Linear Pressure:',fl1.p[0:4])&gt;&gt;&gt; Initial Pressure: [0. 0. 0. 0.]&gt;&gt;&gt; Linear Pressure: [ 0. -1. -3. -5.]At the faces (represented by xc) we can then calculate the velocities using the Darcy’s Law method also in the fluid class:print('Initial Velocity (correct):',fl1.u[0:4]) # velocity from initializationfl1.u = np.zeros(base_mesh.Nx) # zero out velocity fl1.darcyv(base_mesh,pm1) # use darcyv methodprint('Final Velocity:',fl1.u[0:4]) # print to confirm that darcyv did what it was supposed to (got same solution as initialization)&gt;&gt;&gt; Initial Velocity (correct): [1.e-04 1.e-04 1.e-04 1.e-04]&gt;&gt;&gt; Final Velocity: [1.e-04 1.e-04 1.e-04 1.e-04]The darcyv method as it is coded looks complicated but it's pretty simple mathematically. The changes made from just applying Darcy's law from the previous post (-K/mu*dP/dx) directly allow it to handle nonhomogeneous porous media and meshes of varying element size, which we might want to do later.Matplotlib OutputWe’ve already gone over outputting results to data. What if you just want some quick results to confirm that everything makes sense? With 1D data, creating line plots will give us faster results. To let us know whether everything went well.The class formation format we’ve used so far has been somewhat cumbersome due to all the parameters. Now, I just want to collect the solution to be output to an object that I can pass to a plotting function. To make the solution object, I can use metaprogramming with the type function:data_sol = type('sol', (object,), {})() # empty object (metaprogramming)data_sol.Np = 3 # Data at nodes: x p, K, mudata_sol.Nx = base_mesh.Nxdata_sol.varnamex = 'x (m)'data_sol.varname = ['p (Pa)', 'K ($m^2$)', '\\u03BC (Pa*s)']data_sol.x = base_mesh.xdata_sol.var = np.zeros((data_sol.Nx,data_sol.Np))data_sol.var = np.concatenate((fl1.p.reshape(data_sol.Nx,1)                               ,pm1.K.reshape(data_sol.Nx,1)                               ,fl1.mu.reshape(data_sol.Nx,1))                              ,axis=1)Here, I've created a new sol object data_sol that is initially empty. I’ve then filled it with the data I need to output and visualize, namely the pressure, permeability, and viscosity which are at the nodes. I want the velocity too but I need a different object to handle the variables calculated at the face. Corresponding code is in the Github repo for this. For now, let's focus on the plot. I can pass this sol object to a function that knows how to read it and create plots:def plot_out(data): # plotting function, takes in data object of specific form and prints plots    N_param = data.Np    N = data.Nx    fig, ax = plt.subplots(N_param,1,figsize=(4,5))        for i in range(0,N_param):        ax[i].plot(data.x, data.var[0:,i], color = 'black',linewidth=0.5)        ax[i].set_xlabel(data.varnamex,fontsize=12)         ax[i].set_ylabel(data.varname[i],fontsize=12)    fig.tight_layout()    plt.show()  ....plot_out(data_sol) # call the plotting outputNow that we can output text and figures to check our results, we can use more sophisticated numerical methods to get solutions to more complicated problem while debugging more efficiently.",
            "content_html": "<p>Now that we have some practice with objects in Python and Darcy’s law, we can create a program that is more expandable and useful. Since this is a physical problem, we need to consider space in our code. So, we need to add a mesh to represent the porous medium and the fluid inside its pores. We also need to output data as plots for immediate review and in a way that other programs can read.</p><p>More classes and objects can get unwieldy, so let's develop a sketch of how the program is going to work overall so we can code effectively. First, a text description: the user (you, or me) is going to create a case file that the csv.Dictreader function will read into Python listing case parameters.  A case object will be instantiated using that data just read. This is as far as we got in the previous post. Now, we can create a mesh (object) representing the space filled with the fluid (object) and solid material/matrix (object). All three objects' parameters will be determined by that parameters specified in the case file. Since the fluid is the only one flowing, Darcy's Law will be called on it to calculate the pressure and flow velocity at the locations specified by the mesh. Lastly, relevant properties will be output to a file that the user can plot or analyze.</p><p>Simple, right? Remember, one step at a time.</p><h3 id=\"the-mesh\">The Mesh</h3><p>The mesh can represent a 1D, 2D, or 3D space. Assume we have a cylindrical pipe filled with sand and water. Depending on its width, diameter, and how homogeneous the sand is, we might want to consider it in 3D or 2D. If we also assume the pipe is very long relative to its diameter, we can simplify the problem to 1D. A 1D mesh is essentially a line with points along it while the 2D and 3D spaces can be divided into a variety of 2D and 3D shapes (squares and cubes being particularly common). So, each element of the 1D mesh represents a slice of the pipe.</p><p>I'll be using finite difference method for the majority of the blog posts. There's more math here than I care to dig into but I recommend reading Patankar &amp; Spalding’s 1972 paper titled “A Calculation Procedure for Heat, Mass, and Momentum Transfer”. In short, from Darcy’s Law, the pressure gradient is used to calculate the velocity. So, the velocity and pressure are more accurately considered at offset locations, for example on a staggered mesh. That is, where you calculate the velocity is offset from where you calculate the pressures. So, you use the pressures at two adjacent cells to calculate the (volume-averaged) velocity at the face between those cells. You can do this to get the velocities at the interior faces. At the inlet and outlet, the inlet pressure and velocity are collocated which may affect the accuracy. That is not important for the current code but, for better-than-1st-order accuracy, we'd need to derive a better approximation for the pressure gradients there. In any case, <a href=\"https://www.cfd-online.com/Wiki/Staggered_grid\">CFD-Online has a pretty short article about the staggered grid issue</a>.</p><p>Back to the OOP: we create a mesh class where each mesh object has a name, shape, density, and specified node (x), interior face (xc), and boundary locations (also xc):</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>class mesh(): # mesh class    def __init__(self,case): # Take in the case info for certain params        dim = 1 # case.dim        if (dim == 1):            self.Nx = int((case.xL - case.x0)/case.dx + 2.0)                    # Face locations            self.xc = np.ones(self.Nx)*case.x0# Initialize mesh            self.xc[self.Nx-1] = case.xL # Outward boundary            for i in range(2,self.Nx-1):                 self.xc[i] = (i-1)*case.dx # Cell Face Locations            # Node locations            self.x = np.copy(self.xc) # Initialize mesh            for i in range(0,self.Nx-1):                self.x[i] = (self.xc[i+1] + self.xc[i])/2 # Cell Node Locations: halfway between faces            self.x[self.Nx-1] = np.copy(self.xc[self.Nx-1]) # Outward boundary        def output(self,fname): # output mesh        with open(fname,'w', newline='') as csvfile:            mesh_write = csv.writer(csvfile,dialect = 'excel', delimiter = '\\t') # writer object            mesh_write.writerow(['i', 'x', 'xc']) # header row            for i in range(0,self.Nx):                mesh_write.writerow([i+1,self.x[i],self.xc[i]]) # actual data rows</code></pre></div></div><p>The mesh consists of nodes and faces: the number of nodes is the number of slices the make the pipe plus 2. Why the plus 2? There are two additional nodes at the inlet and outlet. There is one less face but, to keep the indices and array lengths the same, the inlet face is duplicated. This helps with coding and that first face can be ignored for the most part. The mesh requires a case object for its instantiation, so we create the mesh object using <code class=\"language-python\">base_mesh = mesh(base)</code>. Let’s ask for some information, just to make sure everything ran smoothly:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print('Node Locations w/ inlet:', base_mesh.x[0:5]) # check inlet location and spacingprint('Nx:', base_mesh.Nx) # check number of elementsprint('Outlet Location:', base_mesh.x[base_mesh.Nx-1])print('Face Locations:', base_mesh.xc[0:5]) &gt;&gt;&gt; Node Locations w/ inlet: [0.   0.01 0.03 0.05 0.07]&gt;&gt;&gt; Nx: 52&gt;&gt;&gt; Outlet Location: 1.0&gt;&gt;&gt; Face Locations: [0.   0.   0.02 0.04 0.06]</code></pre></div></div><p>The number of elements is correct, the inlet face is duplicated, and the spacing for the interior node locations is correct. For the calculations to follow, we just have to remember the offset between the node and face indices for our accuracy. Now we can output this to a file that another program can use, maybe for visualization, by calling the output method that's also in the mesh class: <code class=\"language-python\">base_mesh.output('base_mesh.dat')</code></p><p>If everything works, the first six lines of your <a href=\"URL to file\">text file</a> will be:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>i\tx\txc1\t0.0\t0.02\t0.01\t0.03\t0.03\t0.024\t0.05\t0.045\t0.07\t0.06</code></pre></div></div><p>If you’re using excel, you can output a csv file: go to the Data tab and do text-to-columns on all the rows with a tab delimiter to get it formatted.</p><h3 id=\"applying-darcys-law-as-a-method-to-a-fluid-object\">Applying Darcy's Law as a Method to a Fluid Object</h3><p>Because the porous medium and fluid occupy the space of the mesh, they need to have some of the same properties as the mesh, namely the shape and spatial positions of the mesh. Then, the pressure at <code class=\"language-python\">p[i]</code> is the pressure at the location <code class=\"language-python\">x[i]</code>. Apart from the size and shape, the fluid and porous medium share a pressure and have their own properties as outlined in Darcy's Law. Both have their own names and volume fractions. The fluid will have a viscosity and velocity and the porous medium will have a permeability:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>class fluid(): # fluid class, can create multiple fluid objects for multiphase flow or other studies    def __init__(self,mesh,fluid_prop):        self.name = fluid_prop['Name']        # Initialize variables        self.p = np.ones(mesh.Nx)*fluid_prop['p0'] # Pressure        self.p[mesh.Nx-1] = fluid_prop['pL'] # Pressure boundary at x = L        self.u = np.ones(mesh.Nx)*fluid_prop['u0'] # Velocity: Staggered mesh so velocity at faces        self.mu = np.ones(mesh.Nx)*fluid_prop['mu'] # Viscosity    def p_lin(self,mesh):        N = mesh.Nx        L = mesh.x[N-1]        L0 = mesh.x[0]        for i in range(1,N):            self.p[i] = (self.p[N-1]-self.p[0])/(L-L0)*mesh.x[i]    def darcyv(self,mesh,pm):        N = mesh.Nx        self.u[0] = -pm.K[0]/self.mu[0]*(self.p[1]-self.p[0])/(mesh.x[1]-mesh.x[0]) # inlet        self.u[1] = self.u[0] # same location        for i in range(2,N-1): # interior faces            Ai = pm.K[i-1]/self.mu[i-1]/(mesh.xc[i]-mesh.x[i-1])            Ai1 = pm.K[i]/self.mu[i]/(mesh.x[i]-mesh.xc[i])            self.u[i] = -Ai*Ai1/(Ai+Ai1)*(self.p[i]-self.p[i-1])        self.u[N-1] = -pm.K[N-1]/self.mu[N-1]*(self.p[N-1]-self.p[N-2])/(mesh.x[N-1]-mesh.x[N-2]) # outletclass por_med(): # porous medium class, for parametric studies or composite porous media    def __init__(self,mesh,pm_prop):        self.name = pm_prop        # Initialize Variables        self.K = np.ones(mesh.Nx)*pm_prop['K'] # Permeability        self.eps = np.ones(mesh.Nx)*pm_prop['eps'] # Porosity...fl1 = fluid(base_mesh,base.fl) # fluid object, determined by mesh and case's fluid propertiespm1 = por_med(base_mesh,base.pm) # porous medium object, determined by mesh and case's porous medium properties</code></pre></div></div><p>With the fluid and porous medium objects created, we can find the pressures and flow velocities within the domain at the points specified by the mesh. While we can do something similar to the direct calculation in in the first blog post, let’s create methods so that the functions are tied to the specific objects. This connects the equations to the specific parts of the problem more directly.</p><p>Since the porous medium is homogeneous, we can assume that the pressure distribution in the porous medium is linear, with the boundary conditions in the case corresponding to the inlet and outlet pressures. Then, we can code a very simple pressure calculation method for the fluid below the instantiation, represented by the <code class=\"language-python\">p_lin(mesh)</code> method in the fluid class above:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print('Initial Pressure:',fl1.p[0:4])fl1.p_lin(base_mesh)print('Linear Pressure:',fl1.p[0:4])&gt;&gt;&gt; Initial Pressure: [0. 0. 0. 0.]&gt;&gt;&gt; Linear Pressure: [ 0. -1. -3. -5.]</code></pre></div></div><p>At the faces (represented by <code class=\"language-python\">xc</code>) we can then calculate the velocities using the Darcy’s Law method also in the fluid class:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>print('Initial Velocity (correct):',fl1.u[0:4]) # velocity from initializationfl1.u = np.zeros(base_mesh.Nx) # zero out velocity fl1.darcyv(base_mesh,pm1) # use darcyv methodprint('Final Velocity:',fl1.u[0:4]) # print to confirm that darcyv did what it was supposed to (got same solution as initialization)&gt;&gt;&gt; Initial Velocity (correct): [1.e-04 1.e-04 1.e-04 1.e-04]&gt;&gt;&gt; Final Velocity: [1.e-04 1.e-04 1.e-04 1.e-04]</code></pre></div></div><p>The <code class=\"language-python\">darcyv</code> method as it is coded looks complicated but it's pretty simple mathematically. The changes made from just applying Darcy's law from the previous post (-K/mu*dP/dx) directly allow it to handle nonhomogeneous porous media and meshes of varying element size, which we might want to do later.</p><h3 id=\"matplotlib-output\">Matplotlib Output</h3><p>We’ve already gone over outputting results to data. What if you just want some quick results to confirm that everything makes sense? With 1D data, creating line plots will give us faster results. To let us know whether everything went well.</p><p>The class formation format we’ve used so far has been somewhat cumbersome due to all the parameters. Now, I just want to collect the solution to be output to an object that I can pass to a plotting function. To make the solution object, I can use metaprogramming with the type function:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>data_sol = type('sol', (object,), {})() # empty object (metaprogramming)data_sol.Np = 3 # Data at nodes: x p, K, mudata_sol.Nx = base_mesh.Nxdata_sol.varnamex = 'x (m)'data_sol.varname = ['p (Pa)', 'K ($m^2$)', '\\u03BC (Pa*s)']data_sol.x = base_mesh.xdata_sol.var = np.zeros((data_sol.Nx,data_sol.Np))data_sol.var = np.concatenate((fl1.p.reshape(data_sol.Nx,1)                               ,pm1.K.reshape(data_sol.Nx,1)                               ,fl1.mu.reshape(data_sol.Nx,1))                              ,axis=1)</code></pre></div></div><p>Here, I've created a new sol object data_sol that is initially empty. I’ve then filled it with the data I need to output and visualize, namely the pressure, permeability, and viscosity which are at the nodes. I want the velocity too but I need a different object to handle the variables calculated at the face. Corresponding code is in the Github repo for this. For now, let's focus on the plot. I can pass this sol object to a function that knows how to read it and create plots:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def plot_out(data): # plotting function, takes in data object of specific form and prints plots    N_param = data.Np    N = data.Nx    fig, ax = plt.subplots(N_param,1,figsize=(4,5))        for i in range(0,N_param):        ax[i].plot(data.x, data.var[0:,i], color = 'black',linewidth=0.5)        ax[i].set_xlabel(data.varnamex,fontsize=12)         ax[i].set_ylabel(data.varname[i],fontsize=12)    fig.tight_layout()    plt.show()  ....plot_out(data_sol) # call the plotting output</code></pre></div></div><p><img src=\"/tim-munuhe.github.io/assets/images/node_data_sol.png\" alt=\"Multi-plot of the face data.\" title=\"Pressure, permeability, and viscosity vs. x.\" /></p><p>Now that we can output text and figures to check our results, we can use more sophisticated numerical methods to get solutions to more complicated problem while debugging more efficiently.</p>",
            "url": "tim-munuhe.github.io/2021/05/01/mesh-fluidpm-plot",
            
            
            
            
            
            "date_published": "2021-05-01T00:00:00-04:00",
            "date_modified": "2021-05-01T00:00:00-04:00",
            
                "author":  {
                "name": "Timothy W. Munuhe, Ph.D.",
                "url": "tim-munuhe.gitub.io",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "tim-munuhe.github.io/2021/05/01/csv-read-parameters",
            "title": "Basic Python with Darcy's Law - User-Defined Parameters",
            "summary": "Read parameters for Darcy's Law from a CSV file.",
            "content_text": "In the previous blog post, I introduced some object-oriented Python by creating a parameter class that initialized a solution to Darcy's law for some default fluid and porous medium. So, just by creating the case, we were done. Now, we want to feed our own properties into Darcy's Law.Let's start with the (easier) parameter problem: we can feed in our own fluid and porous medium properties by adding to the instantiation’s input. Currently, we just have (self) for the initialization. Let's add the length of the porous medium:class case_param():     def __init__(self,L):         self.dim = 1 # dimensions         self.x0 = 0.0 # inlet position         self.xL = self.x0 + L # outlet         fluid_name = 'Water'         mu = 0.001         u0 = 0.0         p0 = 0.0 # inlet pressure         pL = -100.0 # outlet         self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL}         pm_name = 'Sand'         K = 1.0E-9         eps = 0.15         self.pm = {'Name': pm_name, 'K':K, 'eps':eps} &gt;br&gt;         self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0)  When we create the case_param object, we need to give the length in the parentheses, like so:base = case_param(1.0)Then, when we call the case's outlet location, we get our length:print(base.xL) &gt;&gt;&gt; 9.999999999999999e-05   which gives us the same answer as the first blog post:print(base.fl['u0'])  &gt;&gt;&gt; 9.999999999999999e-05   We could keep going this way but we have at least 8 parameters for our case that we'd want to vary: the fluid name, viscosity, inlet and outlet pressure, porous medium name, permeability, porosity, and the length of the domain. Instead, we can use text files or CSV files with specified formats to feed in the case parameters, allowing a more streamlined multi-case process. Let's use CSV: we can create it in Excel and it’s use in Python for Data Science means there will be resources for troublshooting later (;-)).First, import the CSV package:import csv   Next, let’s create our CSV case file using Excel:            case_name      fluid      p0      pL      mu      porous_medium      length      K      eps                  base      water      0.000      -100.000      0.001      sand      1.000      1.00E-09      0.150              long      water      0.000      -100.000      0.001      sand      2.000      1.00E-09      0.150              press      water      100.000      -100.000      0.001      sand      1.000      1.00E-09      0.150              powder      water      0.000      -100.000      0.001      powder      1.000      1.00E-11      0.300              oil      oil      0.000      -100.000      0.060      sane      1.000      1.00E-09      0.150      We can use the csv.reader function and skip the first line to create individual case parameter lists, or, we can use the csv.DictReader function to construct individual case dictionaries:with open('casefile.csv',newline='') as casefile:     casereader = csv.DictReader(casefile)     i = 0     caselist = {}     for row in casereader:            caselist[i] = row         print(row['case_name'], row['fluid'], row['mu']) # check that code works as expected         i += 1 &gt;&gt;&gt; base water 0.001 &gt;&gt;&gt; long water 0.001 &gt;&gt;&gt; press water 0.001 &gt;&gt;&gt; powder water 0.001 &gt;&gt;&gt; oil oil 0.060  DictReader uses the first row of the CSV file as the keys and the subsequent row values are the dictionary entries. The only problem is that all entries are read as strings, which must convert the number variables to floats in the &lt;pre&gt;case_param &lt;/pre&gt; instantiation:class case_param():     def __init__(self,param):         self.name = param['case_name'] # now the name is given inside the case, not as the case's actual name         self.dim = 1 # dimensions         self.x0 = 0.0 # inlet position         self.xL = self.x0 + float(param['length']) # outlet         fluid_name = param['fluid']         mu = float(param['mu'])         u0 = 0.0         p0 = float(param['p0']) # inlet pressure         pL = float(param['pL']) # outlet         self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL}         pm_name = param['porous_medium']          K = float(param['K'])         eps = float(param['eps'])         self.pm = {'Name': pm_name, 'K':K, 'eps':eps}          self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0)  We can initialize the original base case and the oil case and compare the velocities: base = case_param(caselist[0])  oil = case_param(caselist[4])  print(base.fl['u0']  &gt;&gt;&gt; 9.999999999999999e-05  print(oil.fl['u0']  &gt;&gt;&gt; 1.6666666666666667e-06  We can see that the viscous oil slows down the flow, as expected. We haven’t changed the Darcy's Law calculation so we know, at least, that the code is reading the CSV file correctly and initializing the case properly.The next step is to see what is going on between the inlet and outlet, specifically with the pressure.",
            "content_html": "<p>In the previous blog post, I introduced some object-oriented Python by creating a parameter class that initialized a solution to Darcy's law for some default fluid and porous medium. So, just by creating the case, we were done. Now, we want to feed our own properties into Darcy's Law.</p><p>Let's start with the (easier) parameter problem: we can feed in our own fluid and porous medium properties by adding to the instantiation’s input. Currently, we just have <code class=\"language-python\">(self)</code> for the initialization. Let's add the length of the porous medium:</p><pre><code class=\"language-python\">class case_param(): <br />    def __init__(self,L): <br />        self.dim = 1 # dimensions <br />        self.x0 = 0.0 # inlet position <br />        self.xL = self.x0 + L # outlet <br />        fluid_name = 'Water' <br />        mu = 0.001 <br />        u0 = 0.0 <br />        p0 = 0.0 # inlet pressure <br />        pL = -100.0 # outlet <br />        self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL} <br />        pm_name = 'Sand' <br />        K = 1.0E-9 <br />        eps = 0.15 <br />        self.pm = {'Name': pm_name, 'K':K, 'eps':eps} &gt;br&gt;         self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0) </code> </pre><p>When we create the <code class=\"language-python\">case_param</code> object, we need to give the length in the parentheses, like so:</p><pre><code class=\"language-python\">base = case_param(1.0)</code></pre><p>Then, when we call the case's outlet location, we get our length:</p><pre><code class=\"language-python\">print(base.xL) <br />&gt;&gt;&gt; 9.999999999999999e-05  </code> </pre><p>which gives us the same answer as the first blog post:</p><pre><code class=\"language-python\">print(base.fl['u0']) <br /> &gt;&gt;&gt; 9.999999999999999e-05  </code> </pre><p>We could keep going this way but we have at least 8 parameters for our case that we'd want to vary: the fluid name, viscosity, inlet and outlet pressure, porous medium name, permeability, porosity, and the length of the domain. Instead, we can use text files or CSV files with specified formats to feed in the case parameters, allowing a more streamlined multi-case process. Let's use CSV: we can create it in Excel and it’s use in Python for Data Science means there will be resources for troublshooting later (;-)).</p><p>First, import the <code class=\"language-python\">CSV</code> package:</p><pre><code class=\"language-python\">import csv  </code> </pre><p>Next, let’s create our CSV case file using Excel:</p><table>  <thead>    <tr>      <th>case_name</th>      <th>fluid</th>      <th>p0</th>      <th>pL</th>      <th>mu</th>      <th>porous_medium</th>      <th>length</th>      <th>K</th>      <th>eps</th>    </tr>  </thead>  <tbody>    <tr>      <td>base</td>      <td>water</td>      <td>0.000</td>      <td>-100.000</td>      <td>0.001</td>      <td>sand</td>      <td>1.000</td>      <td>1.00E-09</td>      <td>0.150</td>    </tr>    <tr>      <td>long</td>      <td>water</td>      <td>0.000</td>      <td>-100.000</td>      <td>0.001</td>      <td>sand</td>      <td>2.000</td>      <td>1.00E-09</td>      <td>0.150</td>    </tr>    <tr>      <td>press</td>      <td>water</td>      <td>100.000</td>      <td>-100.000</td>      <td>0.001</td>      <td>sand</td>      <td>1.000</td>      <td>1.00E-09</td>      <td>0.150</td>    </tr>    <tr>      <td>powder</td>      <td>water</td>      <td>0.000</td>      <td>-100.000</td>      <td>0.001</td>      <td>powder</td>      <td>1.000</td>      <td>1.00E-11</td>      <td>0.300</td>    </tr>    <tr>      <td>oil</td>      <td>oil</td>      <td>0.000</td>      <td>-100.000</td>      <td>0.060</td>      <td>sane</td>      <td>1.000</td>      <td>1.00E-09</td>      <td>0.150</td>    </tr>  </tbody></table><p>We can use the <code class=\"language-python\">csv.reader</code> function and skip the first line to create individual case parameter lists, or, we can use the <code class=\"language-python\">csv.DictReader</code> function to construct individual case dictionaries:</p><pre><code class=\"language-python\">with open('casefile.csv',newline='') as casefile: <br />    casereader = csv.DictReader(casefile) <br />    i = 0 <br />    caselist = {} <br />    for row in casereader:    <br />        caselist[i] = row <br />        print(row['case_name'], row['fluid'], row['mu']) # check that code works as expected <br />        i += 1 <br />&gt;&gt;&gt; base water 0.001 <br />&gt;&gt;&gt; long water 0.001 <br />&gt;&gt;&gt; press water 0.001 <br />&gt;&gt;&gt; powder water 0.001 <br />&gt;&gt;&gt; oil oil 0.060 </code> </pre><p>DictReader uses the first row of the CSV file as the keys and the subsequent row values are the dictionary entries. The only problem is that all entries are read as strings, which must convert the number variables to floats in the &lt;pre&gt;<code class=\"language-python\">case_param</code> &lt;/pre&gt; instantiation:</p><pre><code class=\"language-python\">class case_param(): <br />    def __init__(self,param): <br />        self.name = param['case_name'] # now the name is given inside the case, not as the case's actual name <br />        self.dim = 1 # dimensions <br />        self.x0 = 0.0 # inlet position <br />        self.xL = self.x0 + float(param['length']) # outlet <br />        fluid_name = param['fluid'] <br />        mu = float(param['mu']) <br />        u0 = 0.0 <br />        p0 = float(param['p0']) # inlet pressure <br />        pL = float(param['pL']) # outlet <br />        self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL} <br />        pm_name = param['porous_medium']  <br />        K = float(param['K']) <br />        eps = float(param['eps']) <br />        self.pm = {'Name': pm_name, 'K':K, 'eps':eps} <br />         self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0) </code> </pre><p>We can initialize the original base case and the oil case and compare the velocities:</p><pre><code class=\"language-python\"> base = case_param(caselist[0]) <br /> oil = case_param(caselist[4]) <br /> print(base.fl['u0'] <br /> &gt;&gt;&gt; 9.999999999999999e-05 <br /> print(oil.fl['u0'] <br /> &gt;&gt;&gt; 1.6666666666666667e-06 </code> </pre><p>We can see that the viscous oil slows down the flow, as expected. We haven’t changed the Darcy's Law calculation so we know, at least, that the code is reading the CSV file correctly and initializing the case properly.</p><p>The next step is to see what is going on between the inlet and outlet, specifically with the pressure.</p>",
            "url": "tim-munuhe.github.io/2021/05/01/csv-read-parameters",
            
            
            
            
            
            "date_published": "2021-05-01T00:00:00-04:00",
            "date_modified": "2021-05-01T00:00:00-04:00",
            
                "author":  {
                "name": "Timothy W. Munuhe, Ph.D.",
                "url": "tim-munuhe.gitub.io",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "tim-munuhe.github.io/2021/04/18/darcys-law",
            "title": "Basic Python with Darcy's Law - Introduction",
            "summary": "Let's begin our Python journey by calculating porous fluid flow.",
            "content_text": "Darcy's law is an equation used to calculate fluid flow through a porous medium under a pressure gradient. It’s also a useful test problem to explore scientific computing with Python from a basic to intermediate level.Darcy's Law can be written as:where  is the superficial flow velocity,  is the hydraulic permeability of the porous medium,  is the viscosity of the liquid, and  is the pressure distribution. All three variables can vary over space. If the problem considered is 2D or 3D, then Darcy's Law becomes a partial differential equation (PDE).PDEs represent a myriad of phenomena mathematically, including heat transfer, electro-magnetism and the price of European options. You can find better discussions elsewhere but some prototypical equations to learn about are Laplace’s equation, Poisson’s equation, the Heat equation, and the Wave equation.Problem SetupLet's say we have a pipe filled with sand. A fluid can flow in the spaces between the individual grains of sand, termed the pores. Depending on how big or small or well-packed the sand grains are, it's easier or harder for the fluid to flow through the pipe. This is represented by . The fluid's viscosity also affects how easily it can flow through the pores (maple syrup? or water? or air?).Basically, the porous medium and fluid flow properties are constant. Let's also assume that the pipe is long enough relative to its diameter that we can assume that pressure only varies significantly along its axis. Then, we can treat this as a 1D problem:So now we have an ordinary differential equation, or ODE. To complete the description of the problem we need 2 boundary conditions. Let's give two boundary conditions:Let's give some properties so we can move on:            Property      Value                                                                                                              Enough Physics. Let's Code!With our current assumptions, the superficial velocity at every point within the pipe is:Then we can solve it quite easily with: K = 1.0E-9 # permeability  mu = 0.001 # viscosity  P_0 = 0.0 # inlet  P_L = -100.0 #outlet  L = 1.0 # pipe length  u = -K/mu*(P_L-P_0)/L  print(u)  &gt;&gt;&gt; 9.999999999999999e-05   Simple, but now I can change the variables and get the velocity immediately. I can even add a bit of extra code to output results and create a sort of solution space examining the effects of different variables. However, the assumptions made to get here are pretty restrictive. What if we want to check the pressure along the pipe? What if the sand is not homogeneous? What if the viscosity of the fluid changes because of temperature? We need a more robust solution.Some basic object-oriented programmingAdmittedly, I'm still learning object-oriented programming so all I can do is write how I understand my code within the paradigm. That being said, the code will work, so take solace in that.I want a more robust code that can take user input and tell the rest of the code how to run. So, I'm going to create a case object. I create a case class:class case_param():     def __init__(self):         self.dim = 1 # dimensions         self.x0 = 0.0 # inlet position         self.xL = 1.0 # outlet         fluid_name = 'Water'         mu = 0.001         u0 = 0.0         p0 = 0.0 # inlet pressure         pL = -100.0 # outlet         self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL}         pm_name = 'Sand'         K = 1.0E-9         eps = 0.15         self.pm = {'Name': pm_name, 'K':K, 'eps':eps}  This class, in short, defines case objects through common variables: number of dimensions, inlet and outlet position, and the fluid and porous medium used and their properties. The fluid and porous medium are both represented thorugh dictionaries which other objects or methods can refer to. Let's use it:base = case_param() base.u0 = -base.pm['K']/base.fl['mu']*(base.fl['pL']-base.fl['p0'])/(base.xL-base.x0) print(base.u0) &gt;&gt;&gt; 9.999999999999999e-05  So, we've got the same result as the previous, simpler code. We’ve also created a case object that the other to-be-created code can use. For now, let me compress the code by initializing the superficial velocity in the instantiation (__init__ method):class case_param():     def __init__(self):         self.dim = 1 # dimensions         self.x0 = 0.0 # inlet position         self.xL = 1.0 # outlet         fluid_name = 'Water'         mu = 0.001         u0 = 0.0         p0 = 0.0 # inlet pressure         pL = -100.0 # outlet         self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL}         pm_name = 'Sand'         K = 1.0E-9         eps = 0.15         self.pm = {'Name': pm_name, 'K':K, 'eps':eps}         self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0) base = case_param() print(base.fl['u0']) &gt;&gt;&gt; 9.999999999999999e-05  Later, I'll be able to pass this to a mesh object and Darcy’s law method to create a solution that I can plot and output to CSV.",
            "content_html": "<p>Darcy's law is an equation used to calculate fluid flow through a porous medium under a pressure gradient. It’s also a useful test problem to explore scientific computing with Python from a basic to intermediate level.</p><p>Darcy's Law can be written as:</p><p align=\"center\"><img src=\"https://latex.codecogs.com/svg.image?\\vec{u}&space;=&space;-\\frac{K}{\\mu}\\nabla&space;P\" /></p><p>where <img src=\"https://latex.codecogs.com/svg.image?\\vec{u}\" alt=\"vel\" /> is the superficial flow velocity, <img src=\"https://latex.codecogs.com/svg.image?K\" alt=\"perm\" /> is the hydraulic permeability of the porous medium, <img src=\"https://latex.codecogs.com/svg.image?\\mu\" alt=\"visc\" /> is the viscosity of the liquid, and <img src=\"https://latex.codecogs.com/svg.image?P\" alt=\"pres\" /> is the pressure distribution. All three variables can vary over space. If the problem considered is 2D or 3D, then Darcy's Law becomes a partial differential equation (PDE).</p><p>PDEs represent a myriad of phenomena mathematically, including heat transfer, electro-magnetism and the price of European options. You can find better discussions elsewhere but some prototypical equations to learn about are Laplace’s equation, Poisson’s equation, the Heat equation, and the Wave equation.</p><h3>Problem Setup</h3><p>Let's say we have a pipe filled with sand. A fluid can flow in the spaces between the individual grains of sand, termed the pores. Depending on how big or small or well-packed the sand grains are, it's easier or harder for the fluid to flow through the pipe. This is represented by <img src=\"https://latex.codecogs.com/svg.image?K\" alt=\"perm\" />. The fluid's viscosity also affects how easily it can flow through the pores (maple syrup? or water? or air?).</p><p>Basically, the porous medium and fluid flow properties are constant. Let's also assume that the pipe is long enough relative to its diameter that we can assume that pressure only varies significantly along its axis. Then, we can treat this as a 1D problem:</p><p align=\"center\"><img src=\"https://latex.codecogs.com/svg.image?u&space;=&space;-\\dfrac{K}{\\mu}\\dfrac{dP}{dx}\" /></p><p>So now we have an ordinary differential equation, or ODE. To complete the description of the problem we need 2 boundary conditions. Let's give two boundary conditions:</p><p align=\"center\"><img src=\"https://latex.codecogs.com/svg.image?P(x=0)&space;=&space;P_0\" /></p><p align=\"center\"><img src=\"https://latex.codecogs.com/svg.image?P(x=L)&space;=&space;P_L\" /></p><p>Let's give some properties so we can move on:</p><table>  <thead>    <tr>      <th style=\"text-align: center\">Property</th>      <th style=\"text-align: center\">Value</th>    </tr>  </thead>  <tbody>    <tr>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?K\" alt=\"perm\" /></td>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?10^{-9}\\;\\frac{m^2}{s}\" alt=\"Kval\" /></td>    </tr>    <tr>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?\\mu\" alt=\"visc\" /></td>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?0.001\\;Pa\\cdot&space;s\" alt=\"Kval\" /></td>    </tr>    <tr>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?P_0\" alt=\"perm\" /></td>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?0\\;Pa\" alt=\"Kval\" /></td>    </tr>    <tr>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?P_L\" alt=\"perm\" /></td>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?-100\\;Pa\" alt=\"Kval\" /></td>    </tr>    <tr>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?L\" alt=\"perm\" /></td>      <td style=\"text-align: center\"><img src=\"https://latex.codecogs.com/svg.image?1\\;m\" alt=\"Kval\" /></td>    </tr>  </tbody></table><h3>Enough Physics. Let's Code!</h3><p>With our current assumptions, the superficial velocity at every point within the pipe is:</p><p align=\"center\"><img src=\"https://latex.codecogs.com/svg.image?u=-\\dfrac{K}{\\mu}\\dfrac{P_L-P_0}{L}\" /></p><p>Then we can solve it quite easily with:</p><pre><code class=\"language-python\"> K = 1.0E-9 # permeability <br /> mu = 0.001 # viscosity <br /> P_0 = 0.0 # inlet <br /> P_L = -100.0 #outlet <br /> L = 1.0 # pipe length <br /> u = -K/mu*(P_L-P_0)/L <br /> print(u) <br /> &gt;&gt;&gt; 9.999999999999999e-05  </code> </pre><p>Simple, but now I can change the variables and get the velocity immediately. I can even add a bit of extra code to output results and create a sort of solution space examining the effects of different variables. However, the assumptions made to get here are pretty restrictive. What if we want to check the pressure along the pipe? What if the sand is not homogeneous? What if the viscosity of the fluid changes because of temperature? We need a more robust solution.</p><h3>Some basic object-oriented programming</h3><p>Admittedly, I'm still learning object-oriented programming so all I can do is write how I understand my code within the paradigm. That being said, the code will work, so take solace in that.I want a more robust code that can take user input and tell the rest of the code how to run. So, I'm going to create a case object. I create a case class:</p><pre><code class=\"language-python\">class case_param(): <br />    def __init__(self): <br />        self.dim = 1 # dimensions <br />        self.x0 = 0.0 # inlet position <br />        self.xL = 1.0 # outlet <br />        fluid_name = 'Water' <br />        mu = 0.001 <br />        u0 = 0.0 <br />        p0 = 0.0 # inlet pressure <br />        pL = -100.0 # outlet <br />        self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL} <br />        pm_name = 'Sand' <br />        K = 1.0E-9 <br />        eps = 0.15 <br />        self.pm = {'Name': pm_name, 'K':K, 'eps':eps} </code> </pre><p>This class, in short, defines case objects through common variables: number of dimensions, inlet and outlet position, and the fluid and porous medium used and their properties. The fluid and porous medium are both represented thorugh dictionaries which other objects or methods can refer to. Let's use it:</p><pre><code class=\"language-python\">base = case_param() <br />base.u0 = -base.pm['K']/base.fl['mu']*(base.fl['pL']-base.fl['p0'])/(base.xL-base.x0) <br />print(base.u0) <br />&gt;&gt;&gt; 9.999999999999999e-05 </code> </pre><p>So, we've got the same result as the previous, simpler code. We’ve also created a case object that the other to-be-created code can use. For now, let me compress the code by initializing the superficial velocity in the instantiation (__init__ method):</p><pre><code class=\"language-python\">class case_param(): <br />    def __init__(self): <br />        self.dim = 1 # dimensions <br />        self.x0 = 0.0 # inlet position <br />        self.xL = 1.0 # outlet <br />        fluid_name = 'Water' <br />        mu = 0.001 <br />        u0 = 0.0 <br />        p0 = 0.0 # inlet pressure <br />        pL = -100.0 # outlet <br />        self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL} <br />        pm_name = 'Sand' <br />        K = 1.0E-9 <br />        eps = 0.15 <br />        self.pm = {'Name': pm_name, 'K':K, 'eps':eps} <br />        self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0) <br /><br />base = case_param() <br />print(base.fl['u0']) <br />&gt;&gt;&gt; 9.999999999999999e-05 </code> </pre><p>Later, I'll be able to pass this to a mesh object and Darcy’s law method to create a solution that I can plot and output to CSV.</p>",
            "url": "tim-munuhe.github.io/2021/04/18/darcys-law",
            
            
            
            
            
            "date_published": "2021-04-18T00:00:00-04:00",
            "date_modified": "2021-04-18T00:00:00-04:00",
            
                "author":  {
                "name": "Timothy W. Munuhe, Ph.D.",
                "url": "tim-munuhe.gitub.io",
                "avatar": null
                }
                
            
        }
    
    ]
}