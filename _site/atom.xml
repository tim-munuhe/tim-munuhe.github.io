<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>tim-munuhe</title>
 <link href="tim-munuhe.github.io/atom.xml" rel="self"/>
 <link href="tim-munuhe.github.io/"/>
 <updated>2021-05-01T23:53:23-04:00</updated>
 <id>tim-munuhe.github.io</id>
 <author>
   <name>Timothy W. Munuhe, Ph.D.</name>
   <email>timothy.munuhe@gmail.com</email>
 </author>

 
 <entry>
   <title>Basic Python with Darcy's Law - User-Defined Parameters</title>
   <link href="tim-munuhe.github.io/2021/05/01/csv-read-parameters"/>
   <updated>2021-05-01T00:00:00-04:00</updated>
   <id>tim-munuhe.github.io/2021/05/01/CSV-Read-Parameters</id>
   <content type="html">&lt;p&gt;In the previous blog post, I introduced some object-oriented Python by creating a parameter class that initialized a solution to Darcy's law for some default fluid and porous medium. So, just by creating the case, we were done. Now, we want to feed our own properties into Darcy's Law.&lt;/p&gt;

&lt;p&gt;Let's start with the (easier) parameter problem: we can feed in our own fluid and porous medium properties by adding to the instantiation’s input. Currently, we just have &lt;code class=&quot;language-python&quot;&gt;(self)&lt;/code&gt; for the initialization. Let's add the length of the porous medium:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class case_param(): &lt;br /&gt;    def __init__(self,L): &lt;br /&gt;        self.dim = 1 # dimensions &lt;br /&gt;        self.x0 = 0.0 # inlet position &lt;br /&gt;        self.xL = self.x0 + L # outlet &lt;br /&gt;        fluid_name = 'Water' &lt;br /&gt;        mu = 0.001 &lt;br /&gt;        u0 = 0.0 &lt;br /&gt;        p0 = 0.0 # inlet pressure &lt;br /&gt;        pL = -100.0 # outlet &lt;br /&gt;        self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL} &lt;br /&gt;        pm_name = 'Sand' &lt;br /&gt;        K = 1.0E-9 &lt;br /&gt;        eps = 0.15 &lt;br /&gt;        self.pm = {'Name': pm_name, 'K':K, 'eps':eps} &amp;gt;br&amp;gt;         self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0) &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;When we create the &lt;code class=&quot;language-python&quot;&gt;case_param&lt;/code&gt; object, we need to give the length in the parentheses, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;base = case_param(1.0)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, when we call the case's outlet location, we get our length:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print(base.xL) &lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; 9.999999999999999e-05  &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;which gives us the same answer as the first blog post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;print(base.fl['u0']) &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; 9.999999999999999e-05  &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;We could keep going this way but we have at least 8 parameters for our case that we'd want to vary: the fluid name, viscosity, inlet and outlet pressure, porous medium name, permeability, porosity, and the length of the domain. Instead, we can use text files or CSV files with specified formats to feed in the case parameters, allowing a more streamlined multi-case process. Let's use CSV: we can create it in Excel and it’s use in Python for Data Science means there will be resources for troublshooting later (;-)).&lt;/p&gt;

&lt;p&gt;First, import the &lt;code class=&quot;language-python&quot;&gt;CSV&lt;/code&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import csv  &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;Next, let’s create our CSV case file using Excel:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;case_name&lt;/th&gt;
      &lt;th&gt;fluid&lt;/th&gt;
      &lt;th&gt;p0&lt;/th&gt;
      &lt;th&gt;pL&lt;/th&gt;
      &lt;th&gt;mu&lt;/th&gt;
      &lt;th&gt;porous_medium&lt;/th&gt;
      &lt;th&gt;length&lt;/th&gt;
      &lt;th&gt;K&lt;/th&gt;
      &lt;th&gt;eps&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;base&lt;/td&gt;
      &lt;td&gt;water&lt;/td&gt;
      &lt;td&gt;0.000&lt;/td&gt;
      &lt;td&gt;-100.000&lt;/td&gt;
      &lt;td&gt;0.001&lt;/td&gt;
      &lt;td&gt;sand&lt;/td&gt;
      &lt;td&gt;1.000&lt;/td&gt;
      &lt;td&gt;1.00E-09&lt;/td&gt;
      &lt;td&gt;0.150&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;long&lt;/td&gt;
      &lt;td&gt;water&lt;/td&gt;
      &lt;td&gt;0.000&lt;/td&gt;
      &lt;td&gt;-100.000&lt;/td&gt;
      &lt;td&gt;0.001&lt;/td&gt;
      &lt;td&gt;sand&lt;/td&gt;
      &lt;td&gt;2.000&lt;/td&gt;
      &lt;td&gt;1.00E-09&lt;/td&gt;
      &lt;td&gt;0.150&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;press&lt;/td&gt;
      &lt;td&gt;water&lt;/td&gt;
      &lt;td&gt;100.000&lt;/td&gt;
      &lt;td&gt;-100.000&lt;/td&gt;
      &lt;td&gt;0.001&lt;/td&gt;
      &lt;td&gt;sand&lt;/td&gt;
      &lt;td&gt;1.000&lt;/td&gt;
      &lt;td&gt;1.00E-09&lt;/td&gt;
      &lt;td&gt;0.150&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;powder&lt;/td&gt;
      &lt;td&gt;water&lt;/td&gt;
      &lt;td&gt;0.000&lt;/td&gt;
      &lt;td&gt;-100.000&lt;/td&gt;
      &lt;td&gt;0.001&lt;/td&gt;
      &lt;td&gt;powder&lt;/td&gt;
      &lt;td&gt;1.000&lt;/td&gt;
      &lt;td&gt;1.00E-11&lt;/td&gt;
      &lt;td&gt;0.300&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;oil&lt;/td&gt;
      &lt;td&gt;oil&lt;/td&gt;
      &lt;td&gt;0.000&lt;/td&gt;
      &lt;td&gt;-100.000&lt;/td&gt;
      &lt;td&gt;0.060&lt;/td&gt;
      &lt;td&gt;sane&lt;/td&gt;
      &lt;td&gt;1.000&lt;/td&gt;
      &lt;td&gt;1.00E-09&lt;/td&gt;
      &lt;td&gt;0.150&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can use the &lt;code class=&quot;language-python&quot;&gt;csv.reader&lt;/code&gt; function and skip the first line to create individual case parameter lists, or, we can use the &lt;code class=&quot;language-python&quot;&gt;csv.DictReader&lt;/code&gt; function to construct individual case dictionaries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;with open('casefile.csv',newline='') as casefile: &lt;br /&gt;    casereader = csv.DictReader(casefile) &lt;br /&gt;    i = 0 &lt;br /&gt;    caselist = {} &lt;br /&gt;    for row in casereader:    &lt;br /&gt;        caselist[i] = row &lt;br /&gt;        print(row['case_name'], row['fluid'], row['mu']) # check that code works as expected &lt;br /&gt;        i += 1 &lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; base water 0.001 &lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; long water 0.001 &lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; press water 0.001 &lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; powder water 0.001 &lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; oil oil 0.060 &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;DictReader uses the first row of the CSV file as the keys and the subsequent row values are the dictionary entries. The only problem is that all entries are read as strings, which must convert the number variables to floats in the &amp;lt;pre&amp;gt;&lt;code class=&quot;language-python&quot;&gt;case_param&lt;/code&gt; &amp;lt;/pre&amp;gt; instantiation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class case_param(): &lt;br /&gt;    def __init__(self,param): &lt;br /&gt;        self.name = param['case_name'] # now the name is given inside the case, not as the case's actually name &lt;br /&gt;        self.dim = 1 # dimensions &lt;br /&gt;        self.x0 = 0.0 # inlet position &lt;br /&gt;        self.xL = self.x0 + float(param['length']) # outlet &lt;br /&gt;        fluid_name = param['fluid'] &lt;br /&gt;        mu = float(param['mu']) &lt;br /&gt;        u0 = 0.0 &lt;br /&gt;        p0 = float(param['p0']) # inlet pressure &lt;br /&gt;        pL = float(param['pL']) # outlet &lt;br /&gt;        self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL} &lt;br /&gt;        pm_name = param['porous_medium']  &lt;br /&gt;        K = float(param['K']) &lt;br /&gt;        eps = float(param['eps']) &lt;br /&gt;        self.pm = {'Name': pm_name, 'K':K, 'eps':eps} &lt;br /&gt;         self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0) &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;We can initialize the original base case and the oil case and compare the velocities:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt; base = case_param(caselist[0]) &lt;br /&gt; oil = case_param(caselist[4]) &lt;br /&gt; print(base.fl['u0'] &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; 9.999999999999999e-05 &lt;br /&gt; print(oil.fl['u0'] &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; 1.6666666666666667e-06 &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;We can see that the viscous oil slows down the flow, as expected. We haven’t changed the Darcy's Law calculation so we know, at least, that the code is reading the CSV file correctly and initializing the case properly.&lt;/p&gt;

&lt;p&gt;The next step is to see what is going on between the inlet and outlet, specifically with the pressure.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Basic Python with Darcy's Law - Introduction</title>
   <link href="tim-munuhe.github.io/2021/04/18/darcys-law"/>
   <updated>2021-04-18T00:00:00-04:00</updated>
   <id>tim-munuhe.github.io/2021/04/18/Darcys-Law</id>
   <content type="html">&lt;p&gt;Darcy's law is an equation used to calculate fluid flow through a porous medium under a pressure gradient. It’s also a useful test problem to explore scientific computing with Python from a basic to intermediate level.&lt;/p&gt;

&lt;p&gt;Darcy's Law can be written as:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://latex.codecogs.com/svg.image?\vec{u}&amp;space;=&amp;space;-\frac{K}{\mu}\nabla&amp;space;P&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;where &lt;img src=&quot;https://latex.codecogs.com/svg.image?\vec{u}&quot; alt=&quot;vel&quot; /&gt; is the superficial flow velocity, &lt;img src=&quot;https://latex.codecogs.com/svg.image?K&quot; alt=&quot;perm&quot; /&gt; is the hydraulic permeability of the porous medium, &lt;img src=&quot;https://latex.codecogs.com/svg.image?\mu&quot; alt=&quot;visc&quot; /&gt; is the viscosity of the liquid, and &lt;img src=&quot;https://latex.codecogs.com/svg.image?P&quot; alt=&quot;pres&quot; /&gt; is the pressure distribution. All three variables can vary over space. If the problem considered is 2D or 3D, then Darcy's Law becomes a partial differential equation (PDE).&lt;/p&gt;

&lt;p&gt;PDEs represent a myriad of phenomena mathematically, including heat transfer, electro-magnetism and the price of European options. You can find better discussions elsewhere but some prototypical equations to learn about are Laplace’s equation, Poisson’s equation, the Heat equation, and the Wave equation.&lt;/p&gt;

&lt;h3&gt;Problem Setup&lt;/h3&gt;

&lt;p&gt;Let's say we have a pipe filled with sand. A fluid can flow in the spaces between the individual grains of sand, termed the pores. Depending on how big or small or well-packed the sand grains are, it's easier or harder for the fluid to flow through the pipe. This is represented by &lt;img src=&quot;https://latex.codecogs.com/svg.image?K&quot; alt=&quot;perm&quot; /&gt;. The fluid's viscosity also affects how easily it can flow through the pores (maple syrup? or water? or air?).&lt;/p&gt;

&lt;p&gt;Basically, the porous medium and fluid flow properties are constant. Let's also assume that the pipe is long enough relative to its diameter that we can assume that pressure only varies significantly along its axis. Then, we can treat this as a 1D problem:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://latex.codecogs.com/svg.image?u&amp;space;=&amp;space;-\dfrac{K}{\mu}\dfrac{dP}{dx}&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;So now we have an ordinary differential equation, or ODE. To complete the description of the problem we need 2 boundary conditions. Let's give two boundary conditions:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://latex.codecogs.com/svg.image?P(x=0)&amp;space;=&amp;space;P_0&quot; /&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://latex.codecogs.com/svg.image?P(x=L)&amp;space;=&amp;space;P_L&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Let's give some properties so we can move on:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Property&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?K&quot; alt=&quot;perm&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?10^{-9}\;\frac{m^2}{s}&quot; alt=&quot;Kval&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?\mu&quot; alt=&quot;visc&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?0.001\;Pa\cdot&amp;space;s&quot; alt=&quot;Kval&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?P_0&quot; alt=&quot;perm&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?0\;Pa&quot; alt=&quot;Kval&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?P_L&quot; alt=&quot;perm&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?-100\;Pa&quot; alt=&quot;Kval&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?L&quot; alt=&quot;perm&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?1\;m&quot; alt=&quot;Kval&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3&gt;Enough Physics. Let's Code!&lt;/h3&gt;

&lt;p&gt;With our current assumptions, the superficial velocity at every point within the pipe is:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https://latex.codecogs.com/svg.image?u=-\dfrac{K}{\mu}\dfrac{P_L-P_0}{L}&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Then we can solve it quite easily with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt; K = 1.0E-9 # permeability &lt;br /&gt; mu = 0.001 # viscosity &lt;br /&gt; P_0 = 0.0 # inlet &lt;br /&gt; P_L = -100.0 #outlet &lt;br /&gt; L = 1.0 # pipe length &lt;br /&gt; u = -K/mu*(P_L-P_0)/L &lt;br /&gt; print(u) &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; 9.999999999999999e-05  &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;Simple, but now I can change the variables and get the velocity immediately. I can even add a bit of extra code to output results and create a sort of solution space examining the effects of different variables. However, the assumptions made to get here are pretty restrictive. What if we want to check the pressure along the pipe? What if the sand is not homogeneous? What if the viscosity of the fluid changes because of temperature? We need a more robust solution.&lt;/p&gt;

&lt;h3&gt;Some basic object-oriented programming&lt;/h3&gt;
&lt;p&gt;Admittedly, I'm still learning object-oriented programming so all I can do is write how I understand my code within the paradigm. That being said, the code will work, so take solace in that.
I want a more robust code that can take user input and tell the rest of the code how to run. So, I'm going to create a case object. I create a case class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class case_param(): &lt;br /&gt;    def __init__(self): &lt;br /&gt;        self.dim = 1 # dimensions &lt;br /&gt;        self.x0 = 0.0 # inlet position &lt;br /&gt;        self.xL = 1.0 # outlet &lt;br /&gt;        fluid_name = 'Water' &lt;br /&gt;        mu = 0.001 &lt;br /&gt;        u0 = 0.0 &lt;br /&gt;        p0 = 0.0 # inlet pressure &lt;br /&gt;        pL = -100.0 # outlet &lt;br /&gt;        self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL} &lt;br /&gt;        pm_name = 'Sand' &lt;br /&gt;        K = 1.0E-9 &lt;br /&gt;        eps = 0.15 &lt;br /&gt;        self.pm = {'Name': pm_name, 'K':K, 'eps':eps} &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;This class, in short, defines case objects through common variables: number of dimensions, inlet and outlet position, and the fluid and porous medium used and their properties. The fluid and porous medium are both represented thorugh dictionaries which other objects or methods can refer to. Let's use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;base = case_param() &lt;br /&gt;base.u0 = -base.pm['K']/base.fl['mu']*(base.fl['pL']-base.fl['p0'])/(base.xL-base.x0) &lt;br /&gt;print(base.u0) &lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; 9.999999999999999e-05 &lt;/code&gt; &lt;/pre&gt;

&lt;p&gt;So, we've got the same result as the previous, simpler code. We’ve also created a case object that the other to-be-created code can use. For now, let me compress the code by initializing the superficial velocity in the instantiation (__init__ method):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class case_param(): &lt;br /&gt;    def __init__(self): &lt;br /&gt;        self.dim = 1 # dimensions &lt;br /&gt;        self.x0 = 0.0 # inlet position &lt;br /&gt;        self.xL = 1.0 # outlet &lt;br /&gt;        fluid_name = 'Water' &lt;br /&gt;        mu = 0.001 &lt;br /&gt;        u0 = 0.0 &lt;br /&gt;        p0 = 0.0 # inlet pressure &lt;br /&gt;        pL = -100.0 # outlet &lt;br /&gt;        self.fl = {'Name': fluid_name, 'mu': mu, 'u0': u0, 'p0': p0, 'pL': pL} &lt;br /&gt;        pm_name = 'Sand' &lt;br /&gt;        K = 1.0E-9 &lt;br /&gt;        eps = 0.15 &lt;br /&gt;        self.pm = {'Name': pm_name, 'K':K, 'eps':eps} &lt;br /&gt;        self.fl['u0'] = -K/mu*(pL-p0)/(self.xL-self.x0) &lt;br /&gt;&lt;br /&gt;base = case_param() &lt;br /&gt;print(base.fl['u0']) &lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; 9.999999999999999e-05 &lt;/code&gt; &lt;/pre&gt;
&lt;p&gt;Later, I'll be able to pass this to a mesh object and Darcy’s law method to create a solution that I can plot and output to CSV.&lt;/p&gt;
</content>
 </entry>
 

</feed>
